plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id "me.shedaniel.unified-publishing" version "0.1.+"
    id 'net.neoforged.gradle.userdev' version '7.0.145'
    id 'net.neoforged.gradle.mixin' version '7.0.145'
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

tasks.named('wrapper', Wrapper).configure {
    // Define wrapper values here so as to not have to always do so when updating gradlew.properties.
    // Switching this to Wrapper.DistributionType.ALL will download the full gradle sources that comes with
    // documentation attached on cursor hover of gradle classes and methods. However, this comes with increased
    // file size for Gradle. If you do switch this to ALL, run the Gradle wrapper task twice afterwards.
    // (Verify by checking gradle/wrapper/gradle-wrapper.properties to see if distributionUrl now points to `-all`)
    distributionType = Wrapper.DistributionType.BIN
}

configurations {
    shadowCommon
    implementation.extendsFrom shadowCommon
}

version = "${minecraft_version}-NeoForge-${mod_version}"
group = "snownee.kiwi" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
var realVersion = project.mod_version + '+neoforge'

java.toolchain.languageVersion = JavaLanguageVersion.of(21)
println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

if (System.getenv().BUILD_NUMBER != null) {
    // Maven version scheme uses dot to separate things
    version += ".${System.getenv().BUILD_NUMBER}"
}

minecraft.accessTransformers.file rootProject.file('src/main/resources/META-INF/accesstransformer.cfg')

// Default run configurations.
// These can be tweaked, removed, or duplicated as needed.
runs {
    // applies to all the run configs below
    configureEach {
        // Recommended logging data for a userdev environment
        // The markers can be added/remove as needed separated by commas.
        // "SCAN": For mods scan.
        // "REGISTRIES": For firing of registry events.
        // "REGISTRYDUMP": For getting the contents of all registries.
        systemProperty 'forge.logging.markers', 'REGISTRIES'

        // Recommended logging level for the console
        // You can set various levels here.
        // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
        systemProperty 'forge.logging.console.level', 'debug'

        modSource project.sourceSets.main
    }

    client {
        // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    server {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
        programArgument '--nogui'
    }

    // This run config launches GameTestServer and runs all registered gametests, then exits.
    // By default, the server will crash when no gametests are provided.
    // The gametest system is also enabled by default for other run configs under the /test command.
    gameTestServer {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    data {
        // example of overriding the workingDirectory set in configureEach above, uncomment if you want to use it
        // workingDirectory project.file('run-data')

        // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
        programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
}

def excludes = [
        "/assets/kiwi/blockstates",
        "/assets/kiwi/models",
        "/assets/kaleidos",
        "/assets/kswitch",
        "/snownee/kiwi/test",
        "/data",
        "/.cache",
        "/third_party"
]
def b = [
        "Specification-Title"     : project.name,
        "Specification-Vendor"    : 'Snownee',
        "Specification-Version"   : '1',
        "Implementation-Title"    : project.name,
        "Implementation-Version"  : realVersion,
        "Implementation-Vendor"   : 'Snownee',
        "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
]

sourceSets {
    main.resources.srcDirs += "$rootDir/src/generated/resources"
    main.java.srcDirs += "$rootDir/annotation/src/main/java"
    main.resources.srcDirs += "$rootDir/annotation-processor/src/main/resources"
    main.java.srcDirs += "$rootDir/annotation-processor/src/main/java"
}

sourceSets {
    processor {
        compileClasspath += sourceSets.main.runtimeClasspath
        runtimeClasspath += sourceSets.main.runtimeClasspath
        java {
            srcDirs = ["$rootDir/annotation-processor/src/main/java"]
        }
        resources {
            srcDirs = ["$rootDir/annotation-processor/src/main/resources"]
        }
    }
}

//tasks.jarJar {
//    exclude(excludes)
//}

shadowJar {
    from(tasks.jarJar.archiveFile)
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    exclude(excludes)
    manifest { attributes(b) }
    relocate "org.yaml.snakeyaml", "${project.group}.shadowed.org.yaml.snakeyaml"
    relocate "com.ezylang.evalex", "${project.group}.shadowed.com.ezylang.evalex"
    configurations = [project.configurations.shadowCommon]
    archiveClassifier.set('')
    finalizedBy 'reobfShadowJar'
}

task APJar(type: Jar) {
    //include "/snownee/kiwi/build"
    //exclude(excludes)
    from(sourceSets.processor.output)
    archiveFileName = "${archivesBaseName}-${archiveVersion}-processor.${archiveExtension}"
}

task sourcesJar(type: Jar) {
    //exclude(excludes)
    manifest { attributes(b) }
    from(sourceSets.main.allJava)
    archiveFileName = "${archivesBaseName}-${archiveVersion}-sources.${archiveExtension}"
}

task deobfJar(type: Jar) {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    //exclude(excludes)
    manifest { attributes(b) }
    archiveFileName = "${archivesBaseName}-${archiveVersion}-deobf.${archiveExtension}"
}

jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    exclude(excludes)
    manifest { attributes(b) }
    finalizedBy('reobfJar')
}

artifacts {
    shadowJar
}

allprojects {
    repositories {
        mavenCentral()
        maven { url "https://api.modrinth.com/maven" }
        maven {
            url = "https://cursemaven.com"
            content {
                includeGroup "curse.maven"
            }
        }
        maven { url "https://maven.shedaniel.me/" }
        maven {
            // location of the maven that hosts JEI files
            name = "Progwml6 maven"
            url = "https://dvs1.progwml6.com/files/maven/"
        }
        maven {
            // location of a maven mirror for JEI files, as a fallback
            name = "ModMaven"
            url = "https://modmaven.dev"
        }
    }
}

dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    implementation "net.neoforged:neoforge:${neo_version}"
    annotationProcessor "org.spongepowered:mixin:0.8.5:processor"
    compileOnly(annotationProcessor("io.github.llamalad7:mixinextras-common:0.3.2"))
//    implementation(jarJar("io.github.llamalad7:mixinextras-forge:0.3.2")) {
//        jarJar.ranged(it, "[0.3.2,)")
//    }

    implementation project(':annotation')
    annotationProcessor project(':annotation-processor')

    implementation "me.shedaniel.cloth:cloth-config-neoforge:${project.cloth_config_version}"
    shadowCommon("org.yaml:snakeyaml:${project.snakeyaml_version}")
    shadowCommon("com.ezylang:EvalEx:${project.evalex_version}")

//    implementation fg.deobf("dev.architectury:architectury-forge:${project.architectury_version}")
//    compileOnly fg.deobf("me.shedaniel:RoughlyEnoughItems-forge:${project.rei_version}")
//    runtimeOnly fg.deobf("me.shedaniel:RoughlyEnoughItems-forge:${project.rei_version}")

    implementation "maven.modrinth:jade:15.1.3+neoforge"

//    // compile against the JEI API but do not include it at runtime
//    compileOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}"))
//    compileOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-forge-api:${jei_version}"))
//    //// at runtime, use the full JEI jar for Forge
//    implementation(fg.deobf("mezz.jei:jei-${minecraft_version}-forge:${jei_version}"))
}

processResources {
    from('src/main/java') {
        include '**/*.json'
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact shadowJar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}

unifiedPublishing {
    project {
        displayName = "[Forge $project.supported_version] $project.mod_version"
        version = realVersion // Optional, Inferred from project by default
        changelog = file("CHANGELOG.md").exists() ? file("CHANGELOG.md").text : "" // Optional, in markdown format
        releaseType = project.release_type // Optional, use "release", "beta" or "alpha"
        gameVersions = [project.minecraft_version]
        gameLoaders = ["neoforge"]

        mainPublication tasks.shadowJar // Declares the publicated jar

        if (System.getenv("CURSE_TOKEN") != null) {
            curseforge {
                token = System.getenv("CURSE_TOKEN")
                id = "303657" // Required, must be a string, ID of CurseForge project

                relations { // Optional, Inferred from the relations above by default
                    optional "cloth-config"
                }
            }
        }

        if (System.getenv("MODRINTH_TOKEN") != null) {
            modrinth {
                token = System.getenv("MODRINTH_TOKEN")
                id = "ufdDoWPd" // Required, must be a string, ID of Modrinth project

                relations { // Optional, Inferred from the relations above by default
                    optional "cloth-config"
                }
            }
        }
    }
}
